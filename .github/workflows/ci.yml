name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  security-events: write

jobs:
  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install frontend dependencies
      working-directory: ./packages/frontend
      run: npm ci

    - name: Run frontend linter
      working-directory: ./packages/frontend
      run: npm run lint

    - name: Install backend dependencies
      working-directory: ./packages/backend
      run: |
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi

    - name: Run backend linter
      working-directory: ./packages/backend
      run: npm run lint

  test:
    runs-on: ubuntu-latest
    needs: lint

    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'

    - name: Install frontend dependencies
      working-directory: ./packages/frontend
      run: npm ci

    - name: Run frontend tests
      working-directory: ./packages/frontend
      run: npm test
      env:
        CI: true

    - name: Install backend dependencies
      working-directory: ./packages/backend
      run: |
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi

    - name: Run backend tests
      working-directory: ./packages/backend
      run: npm test
      env:
        CI: true

    - name: Upload coverage
      uses: codecov/codecov-action@v3
      if: matrix.node-version == '18.x'

  build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'

    - name: Install frontend dependencies
      working-directory: ./packages/frontend
      run: npm ci

    - name: Build frontend
      working-directory: ./packages/frontend
      run: npm run build

    - name: Install backend dependencies
      working-directory: ./packages/backend
      run: |
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi

    - name: Build backend
      working-directory: ./packages/backend
      run: npm run build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          packages/frontend/.next
          packages/frontend/out

  docker:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push frontend
      uses: docker/build-push-action@v4
      with:
        context: ./packages/frontend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/justdesk-frontend:latest
          ${{ secrets.DOCKER_USERNAME }}/justdesk-frontend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push backend
      uses: docker/build-push-action@v4
      with:
        context: ./packages/backend
        push: true
        tags: |
          ${{ secrets.DOCKER_USERNAME }}/justdesk-backend:latest
          ${{ secrets.DOCKER_USERNAME }}/justdesk-backend:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
