name: Deploy to Amazon ECS

on:
  push:
    branches: [ "main" ]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}          # eu-west-2
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}        # myapp-cluster
  ECS_SERVICE: ${{ secrets.ECS_SERVICE }}        # myapp-service
  ECS_TASK_DEFINITION: ${{ secrets.ECS_TASK_DEFINITION }}  # .aws/task-definition.json
  CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}  # task def içindeki container adı (örn: myapp-container)

permissions:
  contents: read

jobs:
  deploy:
    name: Build, Push (Compose) & Deploy (ECS)
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set IMAGE_TAG
        run: echo "IMAGE_TAG=${GITHUB_SHA}" >> $GITHUB_ENV

      - name: Build images via Docker Compose
        env:
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          docker compose -f docker-compose.yml build

      - name: Push images via Docker Compose
        env:
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
        run: |
          docker compose -f docker-compose.yml push

      - name: Compose export image URI (single service)
        id: image_uri
        env:
          IMAGE_TAG: ${{ env.IMAGE_TAG }}
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }} # örn: myapp
        run: |
          echo "uri=${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition justdesk-task \
          --query taskDefinition > task-definition.json

      - name: Render task definition
        id: render-task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: justdesk-backend-container   # Task Def içindeki containerName ile birebir aynı olmalı
          image: ${{ steps.image_uri.outputs.uri }}

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render-task-def.outputs.task-definition }}
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true